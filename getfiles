#!/bin/tcsh -f 

set Version = "1.03"
# Multi-host file retriever Reads input list of hosts and retrieves specified path
# to local current directory with retrieved host name appended to file name
# Created by Victor E. Vaile, IV on 20120329
# 1.00 20120329	Initial Version
# 1.02 20120721	Added handing for recursive copy of remote directories
#		Added 'all', 'none' as (hidden) optional answers to 
#		overwrite question
#		Option to create individual destination dirs for each host
#		Option to specify alternate remote user (still default root)
#		Changed foreach to skip comments in host list files
# 1.03 20130414	Updated help and license aliases

alias usage 'echo "";echo "Usage: $0:t -f HostListFile -p RemoteFilePath [-h] [-d] [-e] [-n|o]";echo "  (-h for help)";echo "";exit 1'
alias bighelp 'echo "";\
echo "${0:t} (Version ${Version}):   Retrieve files from remote hosts.";\
echo "";\
echo "Usage: $0:t -f HostListFile -p RemoteFilePath [-h] [-d] [-e] [-n|o]";\
echo "";\
echo "Options:";\
echo "";\
echo "  -f      Provided arg (HostListFile, or '\'-\'' for STDIN) will be used for host list";\
echo "  -p      Provided arg (RemoteFilePath) specifies files to retrieve from hosts in list";\
echo "  -u "\$"id  Specify user "\$"id on remote systems (default root) empty or '\'-\'' uses current login";\
echo "  -h      Show this help text";\
echo "  -d      Echo commands, but do not execute";\
echo "  -e      Echo commands before executing";\
echo "  -n      Do not overwrite existing local files of the same name";\
echo "  -o      Overwrite existing local files of the same name without asking";\
echo "          If neither -n or -o are specified $0:t will prompt to overwrite duplicate files";\
echo "  -hd     Create individual directories for each host from which data is copied";\
echo "  -np     Do not verify host availability via ICMP ping before attempting scp";\
echo "  -h      Display this help text and exit";\
echo "  -lic    Display Software License and exit";\
echo "";\
exit 0'
alias license 'echo "";\
	printf "Copyright © 2012-2013 Victor E. Vaile, IV. All Rights Reserved.\n\n";\
	printf "Redistribution and use in source and binary forms, with or without modification,\n";\
	printf "are permitted provided that the following conditions are met:\n\n";\
	printf "1. Redistributions of source code must retain the above copyright notice, this\n";\
	printf "   list of conditions and the following disclaimer.\n\n";\
	printf "2. Redistributions in binary form must reproduce the above copyright notice,\n";\
	printf "   this list of conditions and the following disclaimer in the documentation\n";\
	printf "   and/or other materials provided with the distribution.\n\n";\
	printf "3. The name of the author may not be used to endorse or promote products derived\n";\
	printf "   from this software without specific prior written permission.\n\n";\
	printf "THIS SOFTWARE IS PROVIDED BY THE AUTHOR '\''AS IS'\'' AND ANY EXPRESS OR IMPLIED\n";\
	printf "WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n";\
	printf "MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n";\
	printf "SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n";\
	printf "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\n";\
	printf "OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n";\
	printf "INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n";\
	printf "CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n";\
	printf "IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n";\
	printf "OF SUCH DAMAGE.\n\n";\
	printf "* That being said, if you find a bug, feel free to report it to the author. :)\n\n";\
exit 0'
set debug = 0
set recur = ""
set eo = :
set myuname = `uname`
set ruser = "root"
set ruserat = ""

if ( "${myuname}" =~ {"FreeBSD","DragonFly"}) then
	set ping = 'ping -c 1 -t 2'
	set parg = ''
else if ("${myuname}" =~ CYGWIN_NT-{4,5}.{0,1,2} ) then
	set ping = 'ping'
	set parg = '56 1'
else
	set ping = 'ping -c 1 -w 1'
	set parg = ''
endif

if ($#argv < 2) then
	if ("$1" !~ -[Hh]* && "$1" !~ "-lic*") then
		usage
	endif
endif

while($#argv >= 1)
        set opt = ${1}
        switch ( ${opt} )
                case -[Hh]:
		case -[Hh][Ee][Ll][Pp]:
			bighelp
			shift
			breaksw
		case -[Ll][Ii][Cc]:
		case -[Ll][Ii][Cc][Ee][Nn][Ss][Ee]:
			license
			shift
			breaksw
                case -[Dd]:
			set debug = 1
			shift
			breaksw
                case -[Rr]:
			set recur = "-r"
			shift
			breaksw
                case -[Ee]:
			set eo = "echo"
			shift
			breaksw
                case -[Nn]:
			set noover = 1
			unset doover
			shift
			breaksw
                case -[Oo]:
			set doover = 1
			unset noover
			shift
			breaksw
                case -[Nn][Pp]:
			set noping = 1
			shift
			breaksw
                case -[Hh][Dd]:
			set hostdirs = 1
			shift
			breaksw
		case -[Ff]:
			shift
			if (-f "${1}") then
				set fil = ${1}
			else if ("${1}" =~ "-" ) then
				set fil = ${1}
			else
				echo "Invalid File '${1}'"
				exit 1
			endif
			shift
			breaksw
		case -[Pp]:
			shift
			if ("${1}" !~ "") then
				set rpath = "${1}"
			else
				echo "No Remote File Path specified"
				exit 1
			endif
			shift
			breaksw
		case -[Uu]:
			shift
			if ("${1}" !~ "" && "${1}" !~ "-*") then
				set ruser = ${1}
				shift
			else if ("${1}" == "-") then
				shift
				unset ruser
			else
				unset ruser
			endif
			breaksw
		default:
			if (! $?fil) then
				if (-f "${1}") then
					set fil = ${1}
					shift
				else if ("${1}" =~ "-" ) then
					set fil = ${1}
					shift
				else
					echo "Invalid File '${1}'"
					exit 1
				endif
			else if (! $?rpath) then
				set rpath = "${1}"
				shift
			else
                        	echo "$opt is an invalid option"
                        	exit 2
			endif
			breaksw
        endsw
end

if (! $?fil ) then
	echo "No Host List File specified"
	usage
else if (! $?rpath ) then
	echo "No Remote File Path specified"
	usage
endif
if ($?ruser) then
	set ruserat = "${ruser}@"
endif

foreach f (`grep -v "^#" "${fil}"`) 
	set doscp = 1
	if ($?hostdirs) then
		set curdest = "${f}/${rpath:t}"
		if ($debug != 1) then
			$eo mkdir -p ${f}
			mkdir -p ${f}
		else
			echo mkdir -p ${f}
		endif
		if ($status != 0) then # Skip copy on any error state from directory creation
			unset doscp
		endif
	else
		set curdest = "${rpath:t}.${f}"
	endif
	if ($debug != 1) then
		if (-d ./"${curdest}" || -f ./"${curdest}") then
			if (-d ./"${curdest}") then
				if ("${recur}" !~ "") then
					echo "Warning: Directory ./${curdest} exists"
				else
					echo ""
					echo "INFO: Using existing directory '${curdest}' for destination of file '${rpath:t}' from host '${f}'"
					echo ""
					set skiponece = 1
				endif
			else 
				echo "Warning: File ./${curdest} exists"
			endif
			if ($?noover) then
				unset doscp
				echo "...Skipping."
			else if ($?doover) then
				echo "...Overwriting."
			else if ($?skiponece) then
				unset skiponece
			else
				echo "Overwrite (y/n)?"
				set ans =  $<
				if ( ${ans} =~ {{Y,y},{Y,y}{E,e}{S,s}} ) then
					echo "..Overwriting."
				else if ( ${ans} =~ {{A,a},{A,a}{L,l}{L,l}} ) then
					echo "..Overwriting All!"
					set doover = 1
					unset noover
				else if ( ${ans} =~ {N,n}{O,o}{N,n}{E,e} ) then
					echo "..Skipping All."
					set noover = 1
					unset doover
					unset doscp 
				else
					echo "..Skipping."
					unset doscp 
				endif
			endif
		endif
		if (! $?noping) then
			$ping ${f} $parg >& /dev/null
			if ($status != 0) then # Skip copy on any error state from ping above
				echo "Host ${f} Unavailable; Skipping."
				unset doscp
			endif
		endif
		if ($?doscp) then
			$eo scp -p ${recur} ${ruserat}${f}:"${rpath}" ./"${curdest}"
			scp -p ${recur} ${ruserat}${f}:"${rpath}" ./"${curdest}"
		endif
	else
		echo scp -p ${recur} ${ruserat}${f}:"${rpath}" ./"${curdest}"
	endif
end

exit 0
